- name: detect if we are in a docker container
  stat: path=/etc/dockerized
  register: dockerized_file

- set_fact:
    dockerized: "{{dockerized_file.stat.exists}}"

- name: install dnsmasq
  apt: pkg=dnsmasq

- name: configure dnsmasq
  copy: src=../files/dnsmasq.conf
        dest=/etc/dnsmasq.conf
        mode=0644
        owner=root
        group=root
  notify:
    - restart dnsmasq

- name: generate locale
  command: locale-gen en_US.UTF-8 creates=/var/lib/locales/supported.d/local

- name: set locale
  command: update-locale LANG=en_US.UTF-8 LC_ALL=en_US.UTF-8
           creates=/etc/default/locale

- name: set /etc/localtime
  file: src=/usr/share/zoneinfo/{{timezone|default('America/New_York')}}
        dest=/etc/localtime
        state=link
        force=yes

- name: set /etc/timezone
  template: src=../templates/timezone.j2 dest=/etc/timezone
  notify: update tzdata

- name: create wtmp file
  command: touch /var/log/wtmp creates=/var/log/wtmp

- name: create lastlog file
  command: touch /var/log/lastlog creates=/var/log/lastlog

- name: set shell prompt to show full hostname with production tag
  lineinfile: dest={{item}}
              regexp="^export PS1="
              line='export PS1="\[\033[1;31m\][PROD]\[\033[0m\] \u@\H:\w\$ "'
  with_items:
    - "/etc/skel/.bashrc"
    - "/home/{{ansible_ssh_user}}/.bashrc"
    - "/root/.bashrc"
  when: "{{production}}"

- name: set shell prompt to show full hostname without production tag
  lineinfile: dest={{item}}
              regexp="^export PS1="
              line='export PS1="\u@\H:\w\$ "'
  with_items:
    - "/etc/skel/.bashrc"
    - "/home/{{ansible_ssh_user}}/.bashrc"
    - "/root/.bashrc"
  when: "not {{production}}"

- name: allow ssh key forwarding through sudo
  lineinfile: dest=/etc/sudoers
              line="Defaults env_keep+=SSH_AUTH_SOCK"
              regexp="Defaults env_keep\\+=SSH_AUTH_SOCK"
              insertafter="^Defaults"

- name: add github ssh host key
  copy: src=../files/ssh_known_hosts
        dest=/etc/ssh/ssh_known_hosts
        mode=0444

- name: update apt cache
  apt: update_cache=yes

- name: remove old apt packages (usually old linux kernel versions)
  command: apt-get autoremove -y

- name: remove puppet-generated resolvconf config
  file: path=/var/run/resolvconf/interface/original.resolvconf state=absent
  when: dockerized

- include: hosts_extra_entry.yml
  vars:
    host: accounts.americancouncils.org
    ip: 192.168.252.192

- name: install ntp daemon
  apt: pkg=chrony
  notify:
    - restart chrony
  when: "not {{dockerized}}"

- name: configure ntp daemon
  copy: src=../files/chrony.conf
        dest=/etc/chrony/chrony.conf
        mode=0644
        owner=root
        group=root
  notify:
    - restart chrony
  when: "not {{dockerized}}"

- name: install curl
  apt: pkg=curl

- name: install pycurl
  apt: pkg=python-pycurl

- name: install python mysql library
  apt: pkg=python-mysqldb

- name: access modern git repository
  apt_repository: repo=ppa:git-core/ppa

- name: install git
  apt: pkg=git

- name: install pip
  apt: pkg=python-pip

- name: install git setuptools
  apt: pkg=python-setuptools-git

- name: remove rsyslog
  apt: pkg=rsyslog state=absent

- name: disable security capabilities of syslog-ng
  copy: src=../files/default-syslog-ng
        dest=/etc/default/syslog-ng
  when: dockerized

- name: get rid of old log files and directories
  file: path=/var/log/{{item}} state=absent
  with_items:
    - auth.log
    - cron.log
    - daemon.log
    - dmesg
    - error
    - messages
    - mysql
    - mysql.err
    - mysql.log
    - redis
    - samba
    - syslog
    - user.log

- name: create syslog-ng conf directory
  file: path=/etc/syslog-ng state=directory

- name: set up syslog-ng config
  template: src=../templates/syslog-ng.conf.j2
            dest=/etc/syslog-ng/syslog-ng.conf
  notify:
    - reload syslog-ng

- name: install syslog-ng
  apt: pkg=syslog-ng state=present

- name: set a cron job to clear out old log files
  copy: src=../files/logclean.cron
        dest=/etc/cron.d/logclean
        mode=0444
        owner=root
        group=root

- name: remove landscape
  apt: pkg=landscape-common state=absent

- name: remove consolekit
  apt: pkg=consolekit state=absent

# TODO: Prevent this from installing the default ferm rules, perhaps with policy-rc.d?
- name: install ferm
  tags: firewall
  apt: pkg=ferm
  notify:
    - reload firewall

- name: configure default ferm firewall rules
  tags: firewall
  copy: src=../files/ferm.conf
        dest=/etc/ferm/ferm.conf
  notify:
    - reload firewall

- name: create ferm.d conf directory
  tags: firewall
  file: path=/etc/ferm/ferm.d state=directory
  notify:
    - reload firewall

# TODO: Remove these after all our machines no longer have this old package
- name: uninstall supervisor apt package
  apt: pkg=supervisor state=absent
  notify:
    - hard restart supervisor
- name: delete old supervisor conf directory
  file: path=/etc/supervisor/ state=absent
  notify:
    - hard restart supervisor
- name: delete old supervisor egg link
  file: path=/usr/local/lib/python2.7/dist-packages/supervisor.egg-link state=absent
  notify:
    - hard restart supervisor
- name: delete old supervisor temp src directory
  file: path=/tmp/src/supervisor state=absent
  register: old_tmp_src
  notify:
    - hard restart supervisor
- name: uninstall old supervisor pip package
  command: pip uninstall -y supervisor
  when: old_tmp_src.changed

- name: install supervisor with full syslog support
  command: pip install "git+http://github.com/samv/supervisor.git@5a2b85e609#egg=supervisor"
           creates=/usr/local/lib/python2.7/dist-packages/supervisor/supervisord.py
  notify:
    - hard restart supervisor

- name: create supervisor config directory
  file: path=/etc/supervisor.d state=directory
  notify:
    - hard restart supervisor

- name: create supervisor log directories
  file: path=/var/log/supervisor/ state=directory
  notify:
    - hard restart supervisor

- name: create upstart configuration for supervisor
  copy: src=../files/supervisor-upstart.conf
        dest=/etc/init/supervisor.conf
  when: "not {{dockerized}}"
  notify:
    - hard restart supervisor

- name: create runit service directories for supervisor
  file: path=/etc/service/supervisor/supervise state=directory mode=0700 owner=root group=root
  when: dockerized

- name: set supervisor under runit control
  copy: src=../files/supervisor-runit.sh
        dest=/etc/service/supervisor/run
        mode=0500
  when: dockerized

- name: link init.d/supervisor to upstart-job
  file: src=/lib/init/upstart-job
        dest=/etc/init.d/supervisor
        state=link
        force=yes

- name: install supervisor config file
  copy: src=../files/supervisord.conf
        dest=/etc/supervisord.conf
  notify:
    - hard restart supervisor

- name: install supervisor_twiddler rpc extension
  command: pip install supervisor_twiddler --no-deps
           creates=/usr/local/lib/python2.7/dist-packages/supervisor_twiddler/rpcinterface.py
  notify:
    - hard restart supervisor

- name: configure supervisor_twiddler
  copy: src=../files/twiddler.conf
        dest=/etc/supervisor.d/twiddler.conf
  notify:
    - hard restart supervisor

- name: start supervisor under runit
  command: sv start supervisor
  when: dockerized

- name: flush ansible handlers
  meta: flush_handlers
